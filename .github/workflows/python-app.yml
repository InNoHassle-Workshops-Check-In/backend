name: Python CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  lint:
    name: Lint Code with Black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13.4
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.4"

      - name: Install uv and create virtual environment
        run: |
          pip install uv
          uv venv
          source .venv/bin/activate
          uv pip install black
          uv run black . --check --diff

  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: username
          POSTGRES_PASSWORD: password
          POSTGRES_DB: db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U username"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      API_JWT_TOKEN: ${{ secrets.API_JWT_TOKEN }}
      DATABASE_URI: postgresql+asyncpg://username:password@127.0.0.1:5432/db
      SECRET_KEY: "SOMEKEY"
      TOKEN_EXPIRE_TIME: 60
      IS_PROD: Prod

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13.4
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.4"

      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          source .venv/bin/activate
          uv pip install -e .
          uv pip install pytest pytest-cov

      # Testing Block
      - name: ðŸ§ª Run Tests
        run: |
          source .venv/bin/activate
          uv run pytest

      # Coverage Block
      - name: ðŸ“Š Generate and Check Coverage
        run: |
          source .venv/bin/activate
          # Generate coverage data
          uv run pytest --cov=. --cov-report=xml --cov-report=html
          # Check coverage threshold
          uv run coverage report --fail-under=60
          # Show detailed report
          uv run coverage report

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/

  deploy:
    name: Deploy FastAPI
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ${{ secrets.BACKEND_REPO_PATH }}
            git stash
            git pull origin main

            export API_JWT_TOKEN="${{ secrets.API_JWT_TOKEN }}"
            export DATABASE_URI="postgresql+asyncpg://username:password@127.0.0.1:5432/db"
            export IS_PROD=true
            export SECRET_KEY="SOMEKEY"
            export TOKEN_EXPIRE_TIME=60

            source venv/bin/activate
            pip install uv
            uv pip install -e .

            sudo systemctl restart backend.service